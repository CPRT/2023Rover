bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    # default_nav_through_poses_bt_xml: ""
    default_nav_to_pose_bt_xml: ""
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: True

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.3
    min_theta_velocity_threshold: 0.001
    progress_checker_plugin: progress_checker
    goal_checker_plugins: [general_goal_checker]
    controller_plugins: [FollowPath]

    progress_checker:
      plugin: nav2_controller::SimpleProgressChecker
      required_movement_radius: 0.5
      movement_time_allowance: 10.0

    general_goal_checker:
      stateful: True
      plugin: nav2_controller::SimpleGoalChecker
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25

    FollowPath:
      plugin: nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController
      transform_tolerance: 1.0

      desired_linear_vel: 0.5
      max_robot_pose_search_dist: 10.0

      lookahead_dist: 1.0
      min_lookahead_dist: 0.3
      max_lookahead_dist: 5.0
      lookahead_time: 1.0
      use_velocity_scaled_lookahead_dist: true

      min_approach_linear_velocity: 0.1
      max_allowed_time_to_collision_up_to_carrot: 1.0

      use_regulated_linear_velocity_scaling: true
      use_cost_regulated_linear_velocity_scaling: false
      regulated_linear_scaling_min_radius: 0.9
      regulated_linear_scaling_min_speed: 0.25

      use_rotate_to_heading: false
      rotate_to_heading_min_angle: 0.785
      rotate_to_heading_angular_vel: 0.1
      max_angular_accel: 0.02


      use_interpolation: false
      cost_scaling_dist: 0.3
      cost_scaling_gain: 1.0
      inflation_cost_scaling_factor: 3.0

      allow_reversing: true

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: True
      rolling_window: true
      width: 10
      height: 10
      resolution: 0.05
      footprint: "[[0.55, 0.50], [0.55, -0.50], [-0.60, -0.50], [-0.60, 0.50]]"
      plugins: [obstacle_layer, inflation_layer]
      obstacle_layer:
        plugin: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer"
        enabled: true
        voxel_decay: 0.5
        decay_model: 0
        voxel_size: 0.05
        track_unknown_space: true
        unknown_threshold: 15
        mark_threshold: 0
        update_footprint_enabled: true
        combination_method: 1
        origin_z: 0.0
        publish_voxel_map: true
        transform_tolerance: 0.2
        mapping_mode: false
        map_save_duration: 60.0
        observation_sources: objectDetection cliffDetection
        objectDetection:
          data_type: PointCloud2
          topic: /ouster/points
          use_sensor_frame_z: true
          max_z: 10.0                  # default 10, meters
          min_z: -10.0                 # default 0, meters 
          vertical_fov_angle: 0.7   # default 0.7, radians. For 3D lidars it's the symmetric FOV about the planar axis.
          vertical_fov_padding: 0.0    # 3D Lidar only. Default 0, in meters 
          horizontal_fov_angle: 6.29  # 3D lidar scanners like the VLP16 have 360 deg horizontal FOV.
          decay_acceleration: 5.0     # default 0, 1/s^2. 
          model_type: 1               # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
          max_obstacle_height: 1.0    # default 2.0, meters
          min_obstacle_height: -0.45   # default 0.0, meters
          obstacle_range: 5.0
        cliffDetection:
          data_type: PointCloud2
          topic: /ouster/points
          use_sensor_frame_z: true
          max_z: 10.0                  # default 10, meters
          min_z: -10.0                 # default 0, meters 
          vertical_fov_angle: 0.523   # default 0.7, radians. For 3D lidars it's the symmetric FOV about the planar axis.
          vertical_fov_padding: 0.05    # 3D Lidar only. Default 0, in meters 
          horizontal_fov_angle: 6.29  # 3D lidar scanners like the VLP16 have 360 deg horizontal FOV.
          decay_acceleration: 5.0     # default 0, 1/s^2. 
          model_type: 1               # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
          max_obstacle_height: -0.9  # default 2.0, meters -height of lidar - cliff drop
          min_obstacle_height: -99.0  # default 0.0, meters
          obstacle_range: 5.0
      inflation_layer:
        plugin: nav2_costmap_2d::InflationLayer
        cost_scaling_factor: 10.0
        inflation_radius: 0.10
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      height: 1000
      width: 1000
      use_sim_time: True
      footprint: "[[0.55, 0.50], [0.55, -0.50], [-0.55, -0.50], [-0.55, 0.50]]"
      resolution: 0.05
      track_unknown_space: True
      plugins: [static_layer, obstacle_layer, inflation_layer]
      static_layer:
        enabled: False
        plugin: nav2_costmap_2d::StaticLayer
        map_subscribe_transient_local: True
        subscribe_to_updates: True
        map_topic: /map
      obstacle_layer:
        plugin: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer"
        enabled: True
        voxel_decay: 0.5
        decay_model: 0
        voxel_size: 0.05
        track_unknown_space: true
        unknown_threshold: 15
        mark_threshold: 0
        update_footprint_enabled: true
        combination_method: 1
        origin_z: 0.0
        publish_voxel_map: true
        transform_tolerance: 0.2
        mapping_mode: false
        map_save_duration: 60.0
        observation_sources: objectDetection cliffDetection
        objectDetection:
          data_type: PointCloud2
          topic: /ouster/points
          use_sensor_frame_z: true
          max_z: 10.0                  # default 10, meters
          min_z: -10.0                 # default 0, meters 
          vertical_fov_angle: 0.7   # default 0.7, radians. For 3D lidars it's the symmetric FOV about the planar axis.
          vertical_fov_padding: 0.0    # 3D Lidar only. Default 0, in meters 
          horizontal_fov_angle: 6.29  # 3D lidar scanners like the VLP16 have 360 deg horizontal FOV.
          decay_acceleration: 5.0     # default 0, 1/s^2. 
          model_type: 1               # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
          max_obstacle_height: 1.0    # default 2.0, meters
          min_obstacle_height: -0.45   # default 0.0, meters
          obstacle_range: 5.0
        cliffDetection:
          data_type: PointCloud2
          topic: /ouster/points
          use_sensor_frame_z: true
          max_z: 10.0                  # default 10, meters
          min_z: -10.0                 # default 0, meters 
          vertical_fov_angle: 0.523   # default 0.7, radians. For 3D lidars it's the symmetric FOV about the planar axis.
          vertical_fov_padding: 0.05    # 3D Lidar only. Default 0, in meters 
          horizontal_fov_angle: 6.29  # 3D lidar scanners like the VLP16 have 360 deg horizontal FOV.
          decay_acceleration: 5.0     # default 0, 1/s^2. 
          model_type: 1               # default 0, model type for frustum. 0=depth camera, 1=3d lidar like VLP16 or similar
          max_obstacle_height: -0.9  # default 2.0, meters -height of lidar - cliff drop
          min_obstacle_height: -99.0  # default 0.0, meters
          obstacle_range: 5.0
      inflation_layer:
        plugin: nav2_costmap_2d::InflationLayer
        cost_scaling_factor: 10.0
        inflation_radius: 0.10
      always_send_full_costmap: True

map_server:
  ros__parameters:
    use_sim_time: True
    yaml_filename: turtlebot3_world.yaml

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    planner_plugins: [GridBased]
    use_sim_time: True

    GridBased:
      plugin: nav2_smac_planner/SmacPlannerHybrid
      tolerance: 1.0 # tolerance for planning if unable to reach exact pose, in meters
      downsample_costmap: false # whether or not to downsample the map
      downsampling_factor: 1 # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: true # allow traveling in unknown space
      max_iterations: 1000000 # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 10000 # maximum number of iterations to attempt to reach goal once in tolerance
      max_planning_time: 3.5 # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      motion_model_for_search: DUBIN # For Hybrid Dubin, Redds-Shepp
      cost_travel_multiplier: 2.0 # For 2D: Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      angle_quantization_bins: 256 # For Hybrid nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
      analytic_expansion_ratio: 3.5 # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 3.0 # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting (in meters). This should be scaled with minimum turning radius and be no less than 4-5x the minimum radius
      minimum_turning_radius: 1.0 # For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
      reverse_penalty: 2.1 # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      change_penalty: 1.5 # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
      non_straight_penalty: 1.5 # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 2.0 # For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      retrospective_penalty: 0.025 # For Hybrid/Lattice nodes: penalty to prefer later maneuvers before earlier along the path. Saves search time since earlier nodes are not expanded until it is necessary. Must be >= 0.0 and <= 1.0
      rotation_penalty: 200.0 # For Lattice node: Penalty to apply only to pure rotate in place commands when using minimum control sets containing rotate in place primitives. This should always be set sufficiently high to weight against this action unless strictly necessary for obstacle avoidance or there may be frequent discontinuities in the plan where it requests the robot to rotate in place to short-cut an otherwise smooth path for marginal path distance savings.
      lookup_table_size: 100.0 # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: True # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
      allow_reverse_expansion: False # For Lattice nodes: Whether to expand state lattice graph in forward primitives or reverse as well, will double the branching factor at each step.
      smooth_path: True # For Lattice/Hybrid nodes: Whether or not to smooth the path, always true for 2D nodes.
      smoother:
        max_iterations: 5000
        w_smooth: 0.5
        w_data: 0.2
        tolerance: 1.0e-10
        do_refinement: True # Whether to recursively run the smoother 3 times on the results from prior runs to refine the results further

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: [simple_smoother]
    simple_smoother:
      plugin: nav2_smoother::SimpleSmoother
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: [spin, backup, drive_on_heading, wait]
    spin:
      plugin: nav2_behaviors/Spin
    backup:
      plugin: nav2_behaviors/BackUp
    drive_on_heading:
      plugin: nav2_behaviors/DriveOnHeading
    wait:
      plugin: nav2_behaviors/Wait
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.05
    min_rotational_vel: 0.02
    rotational_acc_lim: 0.02

robot_state_publisher:
  ros__parameters:
    use_sim_time: True

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: wait_at_waypoint
    wait_at_waypoint:
      plugin: nav2_waypoint_follower::WaitAtWaypoint
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 40.0
    scale_velocities: False
    feedback: OPEN_LOOP
    max_velocity: [1.0, 0.0, 1.0]
    min_velocity: [-1.0, 0.0, -1.0]
    max_accel: [0.1, 0.0, 0.01]
    max_decel: [-0.1, 0.0, -0.01]
    odom_topic: odometry/filtered/local
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0
